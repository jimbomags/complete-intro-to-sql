{"pageProps":{"post":{"attributes":{},"html":"<p>Some times you need two queries to do one thing. Some times you can rethink queries to accomplish the same thing but other times it&#39;s easier to just have two queries. You could do this in code: query and id and then prepare a second query using the result of the first to get what you&#39;re looking for, but it&#39;d be so much easier if we could embed that. And you guessed it, you sure can.</p>\n<p>Let&#39;s see how. What if we I wanted to find everyone that was cast in <code>Tron Legacy</code> and we don&#39;t know the id off the top of our heads? We could absolutely do that with joins but we can actually do it with a subquery too.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  p.name\n<span class=\"hljs-keyword\">FROM</span>\n  casts c\n\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span>\n  people p\n<span class=\"hljs-keyword\">ON</span>\n  c.person_id <span class=\"hljs-operator\">=</span> p.id\n\n<span class=\"hljs-keyword\">WHERE</span>\n  c.movie_id <span class=\"hljs-operator\">=</span> (\n    <span class=\"hljs-keyword\">SELECT</span>\n      id\n    <span class=\"hljs-keyword\">FROM</span>\n      movies\n    <span class=\"hljs-keyword\">WHERE</span>\n      name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;Tron Legacy&#x27;</span>\n  );\n</code></pre>\n<ul>\n<li>The <code>()</code> represent that you can doing to do a subquery. This one will run first and then its results will be used in the second query.</li>\n<li>A subquery must return a single column. I think that makes sense here since we&#39;re asking for the id from the movies table.</li>\n<li>On one hand nesting makes thing hard to read. On the other hand grasping joins at a glance be a lot of cognitive load. Use your best judgment on which is more &quot;readable&quot; to you. Sometimes it&#39;ll be a subquery, sometimes it&#39;ll be a join.</li>\n</ul>\n<p>To see how to do this with a join, try this query:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  p.name\n<span class=\"hljs-keyword\">FROM</span>\n  casts c\n\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span>\n  people p\n<span class=\"hljs-keyword\">ON</span>\n  c.person_id <span class=\"hljs-operator\">=</span> p.id\n\n<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span>\n  movies m\n<span class=\"hljs-keyword\">ON</span>\n  c.movie_id <span class=\"hljs-operator\">=</span> m.id\n<span class=\"hljs-keyword\">AND</span>\n  m.name<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&#x27;Tron Legacy&#x27;</span>;\n</code></pre>\n<p>So which one is &quot;better&quot;? That&#39;s really up to you. The cost of the subquery one is <code>cost=156.73..308.04</code> and the cost of the inner join one is <code>cost=148.86..175.03</code>. That&#39;s mostly negligible in a production environment but the join is faster this time. 99% of the time I&#39;d say joins will be faster but frequently it doesn&#39;t much matter. When it&#39;s close enough, choose which one you can maintain better (generally speaking, optimize queries that are slow and run frequently.)</p>\n","slug":"how-to-subquery","title":"How to Subquery","section":"Subqueries","icon":"circle-dot","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/11-subqueries/A-how-to-subquery.md","nextSlug":"/lessons/subqueries/arrays","prevSlug":"/lessons/views/materialized-views"}},"__N_SSG":true}