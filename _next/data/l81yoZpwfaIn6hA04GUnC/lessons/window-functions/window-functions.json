{"pageProps":{"post":{"attributes":{},"html":"<blockquote>\n<p>Back to movies. <code>\\c omdb</code> to reconnect to the movies db.</p>\n</blockquote>\n<p>Let&#39;s chat a moment about window functions. We saw one briefly in our Node.js project where we needed it for the count of the whole table.</p>\n<p>What if we wanted aggregate information about part of our rows. Basically a GROUP BY for an individual row.</p>\n<p>Here&#39;s an example: our movies table has vote_averages in it. What if for each row we also wanted to see the average vote_average for the whole table?</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  name, kind, vote_average, <span class=\"hljs-built_in\">AVG</span>(vote_average) <span class=\"hljs-keyword\">OVER</span> () <span class=\"hljs-keyword\">AS</span> all_average\n<span class=\"hljs-keyword\">FROM</span>\n  movies\nLIMIT <span class=\"hljs-number\">50</span>;\n</code></pre>\n<p>This adds an <code>all_average</code> column that will be the average vote_average for the entire table. The OVER says we&#39;re going to use a window function and the <code>()</code> means we&#39;re not going to do any more slicing and dicing: we just want to include the whole result set.</p>\n<p>This is sorta useful but what if we wanted to be a bit more granular than that? What we if wanted to see the average of its <code>kind</code> (the kind in this table is movie, movieseries, episode, series, etc.)? We can do that with a PARTITION BY statement.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  name, kind, vote_average, <span class=\"hljs-built_in\">AVG</span>(vote_average) <span class=\"hljs-keyword\">OVER</span> (<span class=\"hljs-keyword\">PARTITION</span> <span class=\"hljs-keyword\">BY</span> kind) <span class=\"hljs-keyword\">AS</span> kind_average\n<span class=\"hljs-keyword\">FROM</span>\n  movies\nLIMIT <span class=\"hljs-number\">50</span>;\n</code></pre>\n<blockquote>\n<p>You may need to add a <code>WHERE kind=&#39;episode&#39;</code> to see how they can be different since this database is mostly movies.</p>\n</blockquote>\n<p>The <code>PARTITION BY</code> statement is telling PostgreSQL how to slice and dice for the averages. In this case we&#39;re saying &quot;give us the average by kind&quot;. So if you see a movie, its <code>kind_average</code> will be the average of all movies. If you see an episode, its <code>kind_average</code> will the average of all episodes.</p>\n<p>To see this together with distinct, let&#39;s look at:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span>\n  kind, <span class=\"hljs-built_in\">AVG</span>(vote_average) <span class=\"hljs-keyword\">OVER</span> (<span class=\"hljs-keyword\">PARTITION</span> <span class=\"hljs-keyword\">BY</span> kind) <span class=\"hljs-keyword\">AS</span> kind_vote_average\n<span class=\"hljs-keyword\">FROM</span> movies;\n</code></pre>\n<p>This now allows us to see at a glance the averages of each kind in a nice table.</p>\n","slug":"window-functions","title":"Window Functions","section":"Window Functions","icon":"magnifying-glass-arrow-right","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/13-window-functions/A-window-functions.md","nextSlug":"/lessons/self-join/self-join","prevSlug":"/lessons/transactions/transactions"}},"__N_SSG":true}