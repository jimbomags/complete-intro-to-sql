{"pageProps":{"post":{"attributes":{"title":"HAVING"},"html":"<p>Okay, so now you want to select only INGREDIENTS with less than 10 items in your database so you can know what sorts of things you need to add to your database.</p>\n<p>The temptation here would be to use <code>WHERE</code></p>\n<blockquote>\n<p>The following query intentionally doesn&#39;t work</p>\n</blockquote>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  type, <span class=\"hljs-built_in\">COUNT</span>(type)\n<span class=\"hljs-keyword\">FROM</span>\n  ingredients\n<span class=\"hljs-keyword\">WHERE</span>\n  <span class=\"hljs-built_in\">COUNT</span>(count) <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span>\n  type;\n</code></pre>\n<p>You&#39;ll get the error that <code>count</code> doesn&#39;t exist and it&#39;s because <code>count</code> isn&#39;t something you&#39;re selecting for, it&#39;s something you&#39;re aggregating. The <code>where</code> clause filters on the rows you&#39;re selecting which happens <em>before</em> the aggregation. This can be useful because let&#39;s say we wanted to select only things that have an <code>id</code> higher than 30.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  type, <span class=\"hljs-built_in\">COUNT</span>(type)\n<span class=\"hljs-keyword\">FROM</span>\n  ingredients\n<span class=\"hljs-keyword\">WHERE</span>\n  id <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">30</span>\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span>\n  type;\n</code></pre>\n<p>Okay, so how we do filter based on the aggregates and not on the rows themselves? With <code>HAVING</code>.</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  type, <span class=\"hljs-built_in\">COUNT</span>(type)\n<span class=\"hljs-keyword\">FROM</span>\n  ingredients\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span>\n  type\n<span class=\"hljs-keyword\">HAVING</span>\n  <span class=\"hljs-built_in\">COUNT</span>(type) <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">10</span>;\n</code></pre>\n<p>And keep in mind you can use both together</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n  type, <span class=\"hljs-built_in\">COUNT</span>(type)\n<span class=\"hljs-keyword\">FROM</span>\n  ingredients\n<span class=\"hljs-keyword\">WHERE</span>\n  id <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">30</span>\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span>\n  type\n<span class=\"hljs-keyword\">HAVING</span>\n  <span class=\"hljs-built_in\">COUNT</span>(type) <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">10</span>;\n</code></pre>\n<p>There are more aggregation functions like <code>MIN</code> (give the smallest value in this selected set), <code>MAX</code> (same but max), and <code>AVG</code> (give me the average). We&#39;ll use those in the next exercise with the movie data set.</p>\n","slug":"having","title":"HAVING","section":"Aggregation","icon":"square-plus","filePath":"/home/runner/work/complete-intro-to-sql/complete-intro-to-sql/lessons/06-aggregation/B-having.md","nextSlug":"/lessons/functions-triggers-and-procedures/functions","prevSlug":"/lessons/aggregation/aggregation"}},"__N_SSG":true}